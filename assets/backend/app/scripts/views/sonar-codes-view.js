// Generated by CoffeeScript 1.6.2
define(['backbone', 'text!templates/sonar-codes-template.html', 'views/sonar-codes-filter-view', 'views/pagination-view', 'views/sonar-code-item-view', 'views/sonar-code-add-view'], function(Backbone, SonarCodesTemplate, SonarCodesFilterView, PaginationView, SonarCodeItemView, SonarCodeAddView) {
  var View;

  View = Backbone.View.extend({
    id: 'sonar-codes-view',
    events: {
      'click .sort-name': 'sort',
      'click .sort-data': 'sort'
    },
    initialize: function() {
      _.bindAll(this);
      this.subViews = {};
      this.collection.bind('reset', this.listSonarCodes);
      this.collection.bind('add', this.listSonarCodes);
      this.collection.bind('remove', this.listSonarCodes);
      return this.collection.fetch();
    },
    listSonarCodes: function() {
      this.$('#sonar-code-list').empty();
      return this.collection.each(function(model) {
        return this.addSonarCode(model);
      }, this);
    },
    addSonarCode: function(model) {
      var sonarCode;

      sonarCode = new SonarCodeItemView({
        model: model
      });
      this.subViews['sonar-code-' + model.cid] = sonarCode;
      return this.$('#sonar-code-list').append(sonarCode.render().el);
    },
    sort: function(e) {
      var $target;

      e.preventDefault();
      $target = $(e.currentTarget);
      if ($target.hasClass('sort-asc')) {
        $target.removeClass('sort-asc');
        $target.addClass('sort-desc');
        $target.removeClass('icon-chevron-up').addClass('icon-chevron-down');
        this.collection.order = '-';
      } else {
        $target.removeClass('sort-desc');
        $target.addClass('sort-asc');
        $target.removeClass('icon-chevron-down').addClass('icon-chevron-up');
        this.collection.order = '+';
      }
      if ($target.hasClass('sort-name')) {
        this.collection.sort = 'name';
      } else if ($target.hasClass('sort-data')) {
        this.collection.sort = 'data';
      }
      return this.collection.fetch();
    },
    render: function() {
      var i, paginationCount, _i, _j;

      this.$el.html(SonarCodesTemplate);
      this.delegateEvents();
      this.listSonarCodes();
      if (!this.subViews.filter) {
        this.subViews.filter = new SonarCodesFilterView({
          collection: this.collection
        });
      }
      this.$('.sonar-codes-filter-container').html(this.subViews.filter.render().el);
      paginationCount = this.$('.pagination-container').length;
      if (paginationCount) {
        if (!this.subViews.pagination) {
          this.subViews.pagination = [];
          for (i = _i = 0; 0 <= paginationCount ? _i <= paginationCount : _i >= paginationCount; i = 0 <= paginationCount ? ++_i : --_i) {
            this.subViews.pagination[i] = new PaginationView({
              collection: this.collection
            });
          }
        }
        for (i = _j = 0; 0 <= paginationCount ? _j <= paginationCount : _j >= paginationCount; i = 0 <= paginationCount ? ++_j : --_j) {
          this.$('.pagination-container:eq(' + i + ')').html(this.subViews.pagination[i].render().el);
        }
      }
      if (!this.subViews['sonar-code-add']) {
        this.subViews['sonar-code-add'] = new SonarCodeAddView({
          model: new this.collection.model
        });
      }
      this.$('#sonar-code-add-container').html(this.subViews['sonar-code-add'].render().el);
      this.rendered = true;
      return this;
    }
  });
  return View;
});
